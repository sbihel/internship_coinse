= Bibliography =
- TODO Evaluating CAVM: A New Search-Based Test Data Generation Tool for C (long 1st-submission version)

== AVM ==

== SBSE ==
- REDO [[http://onlinelibrary.wiley.com/doi/10.1002/stvr.294/epdf|mcminn2004search]] Search-based Software Test Data Generation: A Survey
    - Test Data Generation Survey.
    - Good overview of Metaheuristic Search Techniques (Section 2) and Structural (White-Box) Testing (Section 3)
- TODO [[http://mcminn.io/publications/tr1.pdf|mcminn2007iguana]] IGUANA: Input Generation Using Automated Novel Algorithms. A Plug and Play Research Tool

== Dynamically-Typed Languages ==
- [[http://www.hpi.uni-potsdam.de/hirschfeld/publications/media/HauptPerscheidHirschfeld_2011_TypeHarvestingAPracticalApproachToObtainingTypingInformationInDynamicProgrammingLanguages_AcmDL.pdf|haupt2011type]] Type Harvesting A Practical Approach to Obtaining Typing Information in Dynamic Programming Languages
    - "exploiting unit tests to automatically obtain type information for a code base"
- [[http://cseweb.ucsd.edu/~rchugh/research/popl12-nested.pdf|chugh2012nested]] ([[https://arxiv.org/pdf/1112.4106.pdf|chugh2012dependent]]) Nested Refinements: A Logic for Duck Typing
    - "System D coordinates SMT-based logical implication and syntactic subtyping to automatically typecheck"
    - Verification
    - you know the type of parameters (I think)

== Object-Oriented Languages / Complex Structures ==

== Random Testing ==

== Mutation Testing ==

== Mock Testing ==
- [[http://planningcards.com/site/history/thoughts/Papers/mockobjects.pdf|mackinnon2000endo]] Endo-Testing: Unit Testing with Mock Objects
    - Pratical POV of mock testing
    - mentions (benefits of) static but no dynamic
- [[http://taoxie.cs.illinois.edu/publications/ase10-moda.pdf|taneja2010moda]] MODA: Automated test generation for database applications via mock objects
    - Application to databases, with parametrized unit tests
- [[https://www.researchgate.net/profile/Tim_Mackinnon/publication/221320466_Mock_Roles_Not_Objects/links/02e7e536beb8cca40f000000.pdf|freeman2004mock]] Mock Roles, Not Objects
    - Long paper, *full* of insights and techniques on using Mocks in practice
- [[http://ieeexplore.ieee.org/abstract/document/4019611/|tillmann2006mock]] Mock-Object Generation with Behavior
    - Short paper, .NET
    - Uses symbolic execution (and concrete, => concolic)

== Test Data ==
- TODO [[http://www.simonpoulding.net/papers/issre_2013_preprint.pdf|feldt2013finding]] Finding Test Data with Specific Properties via Metaheuristic Search
- TODO [[http://ieeexplore.ieee.org/document/1702369/#full-text-section|miller1976automatic]] Automatic generation of floating-point test data


= Journal =
== Things Done ==
- work on pavm
- work on cavm

- thoughts on AVM for types
    - finding type isn't a good goal because all types can fit with duck typing
    - mock objects seem to be the solution (?)
        - When do you stop in 'recursive' mock objects?
        - for each method that is missing you have to re-executing the whole function, maybe we need automatically
          laziness
            - the execution could be different if the method exists in some edge cases
        - Nothing useful in the related work
    - How do you know that a type error isn't actually a bug?
        - if every type generates it?
        - what is 'every type'?
        - with mock objects you can implement it and miss the bug
        - what if the function is supposed to raise a TypeError in some cases?
    - try every possible combination of types?
        - no that's stupid we're doing AVM
    - one AVM for types then one AVM for values? doesn't seem possible
- Integrated a random choice of type in the AVM
    - type is changed only when there is a `TypeError`
    - has a list of supported/usable types
    - AVM for types
        - if the error message changes, change variable
        - might have a `TypeError` later on because `if False:` instead of `if 0:`

- RuTeG code analysis
    - Data Generators
        - Basic random generators for Floats, Fixnum, Arrays, Strings, Objects
        - Additional User-Defined generators for email addresses, complex numbers, matrices, ...
        - Uses a list of supported types
        - "TypeList maintains information about possible input types for parameters. Such a list is created for each
          parameter individually. For each type within the list, a value can be assigned, that expresses the "goodness"
          of a type"
    - Quite similar to what I did
- [[https://github.com/simonpoulding/DataGenerators.jl]]

- Can we write something for small programs, have a list of all possible types and try them

- (Citation from Shin Yoo) I see two major approaches viable:
    1. SBST for dynamically typed languages is really just type inference + the good old SBST
    2. No, we should infer types using search as well.

- Maybe it could be interesting to use complex structures/types only when there are annotations
    - (I think I've read that having lots of classes is a code smell, so annotating complex parameters isn't a big
      overhead?)

== Blocking Points ==
- ~~Returns~~ Exits in switch cases in function calls
    - underlying problem, one `if` for multiple cases
{{{c
switch (a) {
    case 1: huge_problem();
    case 2: break;
}}}
- Instrumenting `for`
    - handle `in` comparator
- Instrumenting `is`
    - Does it make sense? because it's testing UID
- Is TypeError a real bug or are we using the wrong type?
- TypeError during type AVM
    - redo all branches?
{{{python
def test(a):
    if a:
        a + 1
}}}
- Using floats instead of ints means that we need a way to have exact values for floats


== Planned work ==
- [O] Instrument Python code
    - [O] Instrument code
        - [o] Modify code
            - [X] Basic comparators handled: ~~Eq~~ | ~~NotEq~~ | ~~Lt~~ | ~~ltE~~ | ~~Gt~~ | ~~GtE~~
            - [ ] Other comparators handled: Is | ~~IsNot~~ | In | ~~NotIn~~
            - [ ] Other boolean like `__notzero__`
            - [X] Use methods instead `l_and` e.g.
            - [o] Branching handled
                - [X] `if`
                    - [X] `if`
                    - [X] `else`
                - [o] `while`
                    - [X] `while`
                    - [ ] `else`
                - [ ] `for`
                    - [ ] `for` (add decorator to `__iter__` [[https://stackoverflow.com/questions/1420484/how-can-i-add-a-decorator-to-an-existing-object-method]]?)
                    - [ ] `else`
                    - [ ] `AsyncFor`
        - [X] Write `branch_distance` functions
        - [X] Generate the dependence map
            - [X] `stmtid` generation
            - [X] dependence assignment
            - [X] Make the `ControlDependency cfg` more global as in the c version
        - [X] Instrument of a single function

- [O] Convert the global tool for Python
    - [X] import file from name (and the file might be in another dir)
        - Using `importlib.util` so we'll assume this project is Python 3.5+ [[https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path]]
    - [X] carry around function name string
    - [X] always use 'sandbox' (i.e. execute function in `Process`) to avoid importing the SUT in the tool
    - [X] add `branch_distance.py` to the dir of the tested file
    - [ ] find a better way for `Process` sandbox, a virgin process is enough but maybe not possible because of shared
          queue
    - [X] `current_elem` should be an index because we're just modifying a copy atm
    - [ ] divide at some point for `float`
    - [X] sometimes, the false and true branches are both false
    - [o] lists
        - [X] param indexing with depth
        - [ ] recursive search
        - assumes there is a first element
            - in the search, try there for the empty list?
    - [X] changed from passing around the elem to passing around the index, but now I can't access elements in lists
        - use a tuple of indexes

- [.] AVM to find correct type of python function
    - [X] Make it possible for cavm to execute the python function
    - [ ] More than just types, e.g. a negative integer
    - [ ] primitive types: *~~bool~~*, numeric (*~~int~~*, *~~float~~*, complex), iterator, sequence (*list*, tuple, range), *str*, binary
          sequence (bytes, bytearray, memoryview), set (set, frozenset), dict, context manager
          other built-in types: modules, classes, functions, methods, ...
        - ignore 'Truth Value Testing'?
        - keep a list of tested types for each param?
    - [ ] Get information from TypeError
    - [ ] Floats seem to stay between 0 and 1
    - [ ] try False and True to avoid problems with e.g. empty list
    - [ ] try [] and with an element to know the type of the list, for now we'll put always the same type in lists
        - an error can occur after because of the size being too small

- [X] CAVM `switch` `default` `if`, the False branch will never be taken thus wasting computing
    - underlying problem, one `if` for multiple cases
- [ ] Better integration of the first round for code generation for `switch` in CAVM
    - Better file names

- [X] Read about mock objects testing
- [ ] Read the code of RuTeG
- [ ] Read about GodelTest
